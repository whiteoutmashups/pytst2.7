
TOTAL DJANGO TUTORIAL

This is the self-tutorial I write for myself every time I re-learn DJANGO

============INSTALL

This part is kinda tricky & annoying cuz different versions of python.

Usually ubuntu comes with py2.7 but u can install 3.0++ etc then use django 2.0++ with it (tut written for this :,( )

Really easy if you do pip3 install django and then sometimes u gotta do something like sudo apt-get install python-django to make all the commands actually work. Check with python -m django --version or actually python3 -m django --version cuz might gotta use python3 for everything like manage.py and all commands

============TUTORIAL PART 1

Go Desktop and do django-admin startproject SITENAMEHERE

that's the big project. Container folder doesn't matter, just folder/file names inside it do.

Now can cd inside and do python3 manage.py runserver to see your site!

Now can make your first 'app' inside. python3 manage.py startapp polls is the tutorial Container

SO PYTHON GOES LIKE URLS --> take you to VIEWS --> takes you to TEMPLATES --> takes you to custom pages filled in with data. Nice!

put this in your polls/views.py:

from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

Now to use this view, make a polls/urls.py and then put:

from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

now from the main SITENAMEHERE/urls.py put these additions so the root project points to your new polls view above:

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('', include('polls.urls')),
    path('polls/', include('polls.urls')),
    path('admin/', admin.site.urls),
]

now python3 manage.py runserver to see if your root is working!!

============TUTORIAL PART 2 - DB

using SQLite for all this.

do python3 manage.py migrate so the DB syncs up with all that above.

Now make some models. These are basically data types, that structure the entries of data into your DB.

Make polls/models.py and put all this (best to type it so you learn it):

from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

now go to SITENAMEHERE/settings.py and add this:

INSTALLED_APPS = [
    'polls.apps.PollsConfig',
]

Not sure if this is actually required but it's in the tutorial so FIND OUT IF ITS NECESSARY OR CAN JUST DO MIGRATE:

python3 manage.py makemigrations polls

This one I'm REALLY kinda sure it's not needed, but make sure:

python3 manage.py sqlmigrate polls 0001

now just do python3 manage.py migrate to make sure it all syncs up. Maybe just skip to here and see if everything works, to delete steps above.

Now can try out some practice with the python3 shell:

python3 manage.py shell

from polls.models import Choice, Question

Question.objects.all()         //shows all question objects in DB

q = Question(question_text="What's up?")    //makes easy call var

q.save ()         //saves text above to entry in DB

q.id()            //shows you the ID of that entry

q.question_text   //shows you the text of it. Good for development

q.question_text = 'SOMETHING NEW HERE'   //edits question_text

q.save()          //saves new question_text

q.objects.all()   //lists all entries again

to make things prettier when accessing them like above, add these to your polls/models.py:

from django.db import models

class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text

class Choice(models.Model):
    # ...
    def __str__(self):
        return self.choice_text

and also:

import datetime

from django.db import models
from django.utils import timezone


class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

now in python3 shell (and django website views etc), you can do things like:

from polls.models import Choice, Question

Question.objects.all()

Question.objects.filter(id=1)    //now you can see it returns something prettier (straight returns question_text instead of weirder stuff)

q.choice_set.all()             //starting to use the Choices PART

q.choice_set.create(choice_text='Not much', votes=0)     //makes new choice

q.choice_set.create(choice_text='The sky', votes=5)      //same same la for more

q.choice_set.all()           //lists all

q.choice_set.count()           //shows # of choices

c.delete()            //deletes one of the choices

MAKING ADMIN SYSTEM

python manage.py createsuperuser

make your admin info when it prompts

go to your 127.0.0.1:8000/admin or whatever and login

go to polls/admin.py and make your polls app appear in dashboard:

from django.contrib import admin

from .models import Question

admin.site.register(Question)

Now you should see your Question data in the admin dashboard

click around to see & edit the data entries

============TUTORIAL PART 3 - VIEWS & TEMPLATES

Full templates guide: https://docs.djangoproject.com/en/2.0/topics/templates/

now add more data to your polls/views.py:

def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)

Then make these work by adding this data to the polls/urls.py:

from django.urls import path

from . import views

urlpatterns = [
    # ex: /polls/
    path('', views.index, name='index'),
    # ex: /polls/5/
    path('<int:question_id>/', views.detail, name='detail'),
    # ex: /polls/5/results/
    path('<int:question_id>/results/', views.results, name='results'),
    # ex: /polls/5/vote/
    path('<int:question_id>/vote/', views.vote, name='vote'),
]

Now you can visit different pages like 127.0.0.1:8000/992382 or whatever to see a page with that number on it, dynamically :D

now add more to your polls/views.py:

from django.http import HttpResponse

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    output = ', '.join([q.question_text for q in latest_question_list])
    return HttpResponse(output)

but it's a static empty layout SO LETS START WITH TEMPLATES!!!!

make a directory called polls/templates cuz if u call it that, it will automatically work.

now it's kinda stupid, but make polls/templates/polls/index.html for your templates, but refer to it as polls/index.html in your views. Just trust me :P Just do it.

now in your new index.html put this:

{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

now that u got that set up, put it in your polls/views.py:

from django.http import HttpResponse
from django.template import loader

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('polls/index.html')
    context = {
        'latest_question_list': latest_question_list,
    }
    return HttpResponse(template.render(context, request))

and now that you understand that, rewrite it nicer with new tools like this:

from django.shortcuts import render

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)

add this to your polls/views.py to cover errors:

from django.http import Http404
from django.shortcuts import render

from .models import Question
# ...
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'polls/detail.html', {'question': question})

so for now it needs this polls/templates/polls/detail.html so put easily:

{{ question }}
<h1>{{ question.question_text }}</h1>
<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>

This is another good tool for combining those, you can edit polls/views.py with it:

from django.shortcuts import get_object_or_404, render

from .models import Question
# ...
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})

Now we can improve polls/templates/polls/index.html to be more dynamic, by changing:

<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>

to

<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>

and now it's more independent.

add some names to your polls/urls.py for better notation etc:

from django.urls import path

from . import views

app_name = 'polls'
urlpatterns = [
    path('', views.index, name='index'),
    path('<int:question_id>/', views.detail, name='detail'),
    path('<int:question_id>/results/', views.results, name='results'),
    path('<int:question_id>/vote/', views.vote, name='vote'),
]

Now you can improve your template further by changing polls/index.html from:

<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>

to

<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>

to use the new name we gave it in the urls.

============TUTORIAL PART 4 - FORMS!

polls/templates/polls/detail.html add a form to it:

<h1>{{ question.question_text }}</h1>

{% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

<form action="{% url 'polls:vote' question.id %}" method="post">
{% csrf_token %}
{% for choice in question.choice_set.all %}
    <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
    <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br />
{% endfor %}
<input type="submit" value="Vote" />
</form>

now it has a form with radio buttons and choices. Yay!

now add this to polls/urls.py so that we can start to enter data thru webpages!

path('<int:question_id>/vote/', views.vote, name='vote'),

and write some real data-processing code into the polls/views.py:

from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from .models import Choice, Question
# ...
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))

Now let's write a view that takes the person to the results page after voting:

from django.shortcuts import get_object_or_404, render


def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/results.html', {'question': question})

Now let's create a polls/templates/polls/results.html with:

<h1>{{ question.question_text }}</h1>

<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
{% endfor %}
</ul>

<a href="{% url 'polls:detail' question.id %}">Vote again?</a>

now if you go to 127.0.0.1/polls/1 and vote, you should be taken to the results page successfully!

---REWRITING VIEWS AS GENERIC

Above was to teach you how views work under the hood. Now we're going to simplify with 'generic' views:

first edit polls/urls.py with:

from django.urls import path

from . import views

app_name = 'polls'
urlpatterns = [
    path('', views.IndexView.as_view(), name='index'),
    path('<int:pk>/', views.DetailView.as_view(), name='detail'),
    path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),
    path('<int:question_id>/vote/', views.vote, name='vote'),
]

now we change polls/views.py to use 'generic' views with:

from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic

from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.order_by('-pub_date')[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'


def vote(request, question_id):
    ... # same as above, no changes needed.

============TUTORIAL PART 6 (skipped test5) - STATIC FILES & STYLES

now create all this --> polls/static/polls/style.css cuz that name will make it automatically work. Then fill it with:

li a {
    color: green;
}

Now connect it by adding this to polls/index.html:

{% load static %}

<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}" />

Now go to http://localhost:8000/polls/ and the question links should be green.

add this to your style.css for a background:

body {
    background: white url("https://media.istockphoto.com/photos/triangular-abstract-background-picture-id624878906?k=6&m=624878906&s=612x612&w=0&h=uDcbe038RdtiiHchahAbwOYfx0bkPVLfsn0NOjA0gTM=") no-repeat;
}

Reload http://localhost:8000/polls/ to see your new background.

Make the rest of your websites like this, and just add the templating language to finish them.

You do this same stuff for js files and images and anything like that. Put them in the static folder and link to them.

============TUTORIAL PART 7 - Customize Admin (FINAL PART)

(all this stuff is polls/admin.py)

Customize stuff for practice, like changing polls/admin.py to have a different order on how it shows:

from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

Now check it, and Question part will be displayed after the pub date part. It's good to be able to order all your things.

You can add headers like this in polls/admin.py:

from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]

admin.site.register(Question, QuestionAdmin)

Now you should see a nice blue header saying "date information"

But it's not showing the Choices part!! So register it with:

from django.contrib import admin

from .models import Choice, Question
# ...
admin.site.register(Choice)

Now you should see it in the admin panel.

But actually, delete that admin.site.register(Choice) code above and we will put it in the Question part, like this:

from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

admin.site.register(Question, QuestionAdmin)

Now it will let you see choices for every part.

This basically gives you several choices as radio buttons for each question.

It's kinda taking all the screen tho, so try adding:

class ChoiceInline(admin.TabularInline):
    #...

Now it's cleaner to look at :)

You can see tho, on the main page under "questions" it just shows the question name and fat nothing on the whole horizontal bar. Add:

class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date')
    list_filter = ['pub_date']
    search_fields = ['question_text']

Now it's showing more :) can add things here to make it nicer.

This also gives it a filter and search bar so you can order things dynamically.

Can change the whole admin panel, even the 'django adminstration' title and colors and all that. Let's do. Edit SITENAMEHERE/settings.py with:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

now make polls/templates/admin/ and copy django/contrib/admin/templates/base_site.html into it

if you can't find that above, search it with: python3 -c "import django; print(django.__path__)"

Now edit the title at the top by editing: {{ site_header|default:_('Django administration') }} with whatever name you want :D

You can even edit all the other titles on each of the admin pages with things like:

{% block branding %}
<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
{% endblock %}

Changing Polls Administration heading right ^there.

you can also copy over django/contrib/admin/templates/index.html into your polls/templates/admin/ and edit the whole feel of the whole admin dashboard.

============TUTORIAL PART 8 - PUTTING ON A SERVER!!

zip your whole project, put it on dropbox, and wget it with your server.

Then sudo unzip PROJECT.zip -d . and it will unzip where u want it.

Now...........idk

-------------Deploy on DigitalOcean for my big projects

https://simpleisbetterthancomplex.com/tutorial/2016/10/14/how-to-deploy-to-digital-ocean.html

-------------Deploy on PythonAnywhere for my annony projects

https://tutorial.djangogirls.org/en/deploy/
